version: '3.8'

services:
  # PostgreSQL database
  postgres:
    image: postgres:14-alpine
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_PASSWORD=postgres
      - POSTGRES_USER=postgres
      - POSTGRES_DB=dao_governance
    ports:
      - "5432:5432"
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 5s
      timeout: 5s
      retries: 5

  # Redis for caching and message broker
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 5s
      timeout: 5s
      retries: 5

  # MongoDB for document storage
  mongo:
    image: mongo:6
    ports:
      - "27017:27017"
    volumes:
      - mongo_data:/data/db
    environment:
      - MONGO_INITDB_ROOT_USERNAME=mongo
      - MONGO_INITDB_ROOT_PASSWORD=mongo
    healthcheck:
      test: echo 'db.runCommand("ping").ok' | mongosh localhost:27017/test --quiet
      interval: 10s
      timeout: 10s
      retries: 5

  # Neo4j for graph database
  neo4j:
    image: neo4j:5
    ports:
      - "7474:7474"  # HTTP
      - "7687:7687"  # Bolt
    volumes:
      - neo4j_data:/data
    environment:
      - NEO4J_AUTH=neo4j/password
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:7474"]
      interval: 10s
      timeout: 10s
      retries: 5

  # InfluxDB for time-series data
  influxdb:
    image: influxdb:2.7-alpine
    ports:
      - "8086:8086"
    volumes:
      - influxdb_data:/var/lib/influxdb2
    environment:
      - DOCKER_INFLUXDB_INIT_MODE=setup
      - DOCKER_INFLUXDB_INIT_USERNAME=admin
      - DOCKER_INFLUXDB_INIT_PASSWORD=password
      - DOCKER_INFLUXDB_INIT_ORG=dao_governance
      - DOCKER_INFLUXDB_INIT_BUCKET=governance_metrics
      - DOCKER_INFLUXDB_INIT_ADMIN_TOKEN=my-super-secret-auth-token
    healthcheck:
      test: ["CMD", "wget", "--no-verbose", "--tries=1", "--spider", "http://localhost:8086/health"]
      interval: 10s
      timeout: 10s
      retries: 5

  # Web application
  web:
    build: 
      context: .
      dockerfile: Dockerfile
    image: dao-governance:latest
    command: python manage.py runserver 0.0.0.0:8000
    volumes:
      - .:/app
      - static_volume:/app/staticfiles
      - media_volume:/app/media
      - logs_volume:/app/logs
    ports:
      - "8000:8000"
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mongo:
        condition: service_healthy
      neo4j:
        condition: service_healthy
      influxdb:
        condition: service_healthy
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=dao_governance
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:mongo@mongo:27017/dao_governance
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - INFLUXDB_URL=http://influxdb:8086
      - INFLUXDB_TOKEN=my-super-secret-auth-token
      - INFLUXDB_ORG=dao_governance
      - INFLUXDB_BUCKET=governance_metrics
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
      - STATIC_URL=/static/
      - STATIC_ROOT=/app/staticfiles
      - MEDIA_URL=/media/
      - MEDIA_ROOT=/app/media
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health/"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery worker
  celery:
    build: 
      context: .
      dockerfile: Dockerfile
    image: dao-governance:latest
    command: celery
    volumes:
      - .:/app
      - logs_volume:/app/logs
    depends_on:
      - web
      - redis
      - mongo
      - postgres
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - DB_ENGINE=django.db.backends.postgresql
      - DB_NAME=dao_governance
      - DB_USER=postgres
      - DB_PASSWORD=postgres
      - DB_HOST=postgres
      - DB_PORT=5432
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - MONGO_URI=mongodb://mongo:mongo@mongo:27017/dao_governance
      - NEO4J_URI=bolt://neo4j:7687
      - NEO4J_USER=neo4j
      - NEO4J_PASSWORD=password
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0
    healthcheck:
      test: celery -A dao_governance inspect ping
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 30s

  # Celery beat for scheduled tasks
  celery-beat:
    build: 
      context: .
      dockerfile: Dockerfile
    image: dao-governance:latest
    command: celery-beat
    volumes:
      - .:/app
      - logs_volume:/app/logs
    depends_on:
      - celery
    environment:
      - DEBUG=True
      - SECRET_KEY=dev-secret-key-change-in-production
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

  # Flower for monitoring Celery tasks
  flower:
    build: 
      context: .
      dockerfile: Dockerfile
    image: dao-governance:latest
    command: flower
    ports:
      - "5555:5555"
    volumes:
      - .:/app
    depends_on:
      - celery
    environment:
      - DEBUG=True
      - CELERY_BROKER_URL=redis://redis:6379/0
      - CELERY_RESULT_BACKEND=redis://redis:6379/0

volumes:
  postgres_data:
  redis_data:
  mongo_data:
  neo4j_data:
  influxdb_data:
  static_volume:
  media_volume:
  logs_volume: 